@startuml

skinparam classAttributeIconSize 0



class Player {
'Nombre que solo tendrá una persona, nadie más puede tener el mismo nombre
- name : String
'- id : int
- hand : list <CardClass>
- blocked : Boolean
- winner : Boolean

+ getName() : String
'+ getInt() : int
+ isWinner() : boolean
+ showCards()
+ cardPlayed(position : int) : CardClass
+ addCards(numCards : int)
}

class CardClass{
- number : int
- colour : String
- action : String
+ CardClass()
+ getNumber() : int
+ getColour() : String
+ getAction() : String
# {abstract} setAction(a : String)
}

class Reverse extends CardClass{
# setAction(a : String)
}

class Block extends CardClass{
# setAction(a : String)
}

class PlusTwo extends CardClass{
# setAction(a : String)
}

class PlusFour extends CardClass{
# setAction(a : String)
}

class ColourSwap extends CardClass{
# setAction(a : String)
}


class Statistic{
- cardsDrawnByPlayers : Map<String, int> /'Map donde almacenamos las cartas que ha robado cada jugador con su nombre y el número de cartas'/

+ updateDataBase(CDBP : Map <String, int>) /'Actualiza la base de datos pasando el player y el número de cartas que ha robado'/
+ getGlobalGames() : int
+ setGlobalGames(globalPlusOne : int)
+ getMoreCardsDrawn() : Map<String, int>
* updateMoreCardsDrawn(playerCards: Map<String, int>)
}

'Los nombres no se pueden repetir entre ellos, así tenemos un solo ID asignado a un nombre'
class DataBase{
- playerNamesAndId : Map<String, int> /'lista de jugadores con sus respectivos id'/
- cardsDrawnByPlayers : Map<String, int>
- globalGames :int

+ setGlobalGames(int)
+ getPlayersAndId() : Map<String, int> /'te devuelve la lista de jugadores con sus respectivos id'/
}

class Deck{
- notMoreCards : boolean
- numCards : int
- playableCards : list<CardClass>
- playedCards : list<CardClass>

+ Deck()
+ getNumCard()
+ getMoreCards() /'Shuffle the cards of the played list and add them to the playableCards'/
}

class Game{
- numPlayers : int
- Players : list<Players>
- currentPlayer : int
- lastCardPlayed : CardClass

+ getCurrentPlayer() : int
+ Game(nPlayer : int , namePlayers : list <String>)
+ getNumPlayers()
+ updateStatistics()
}

class Statistic
note left: Una clase statistic por cada jugador

Deck *-down-> "1..*" CardClass : cards
Player *-> "1..*" CardClass : cards
Game *-down-> "1..*" Statistic : stats
Statistic *-down-> "1..*" DataBase : DB
@enduml